import math
import os
import queue
import threading
import math

import imageio
import array
import numpy
import numpy as np
import pandas as pd

from os import listdir
from os.path import join

INPUT_PATH = r"E:\MalwareDataset\sophos\decompressed_malware"
OUTPUT_PATH = r"E:\MalwareDataset\sophos\malware_images"

Queue = queue.Queue()

for folder in listdir(INPUT_PATH):
    for file in listdir(os.path.join(INPUT_PATH, folder)):
        Queue.put((folder, file))


# def factor_int(n):
#     val = math.ceil(math.sqrt(n))
#     val2 = int(n / val)
#     while val2 * val != float(n):
#         val -= 1
#         val2 = int(n / val)
#     return val, val2, n

def isPerfect(N):
    if (math.sqrt(N) - math.floor(math.sqrt(N)) != 0):
        return False
    return True


def getClosestPerfectSquare(N):
    aboveN = -1
    n1 = N + 1
    while (True):
        if (isPerfect(n1)):
            aboveN = n1
            break
        else:
            n1 += 1

    diff1 = aboveN - N

    return diff1


def to_img():
    while Queue:

        element = Queue.get()

        folder_name = str(element[0])
        file_name = str(element[1])
        data_path = join(INPUT_PATH, folder_name, file_name)
        f = open(data_path, 'rb')
        ln = os.path.getsize(data_path)

        # val, val2, num = factor_int(ln)

        a = array.array("B")
        a.fromfile(f, ln)
        f.close()

        extra_bytes = getClosestPerfectSquare(len(a))
        extra_bytes = np.array([0] * extra_bytes)

        a.extend(extra_bytes)
        edge = int(math.sqrt(len(a)))

        g = numpy.reshape(a, (edge, edge))

        g = numpy.uint8(g)

        if not os.path.exists(join(OUTPUT_PATH, folder_name)):
            os.mkdir(join(OUTPUT_PATH, folder_name))

        imageio.imwrite(join(OUTPUT_PATH, folder_name, file_name + ".jpg"), g)
        print(Queue.qsize())


for i in range(4):
    threading.Thread(target=to_img).start()
